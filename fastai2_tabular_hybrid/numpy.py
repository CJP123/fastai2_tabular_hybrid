# AUTOGENERATED! DO NOT EDIT! File to edit: 00_Numpy.ipynb (unless otherwise specified).

__all__ = ['NumpyDataset', 'NumpyDataLoader', 'NumpyDataLoaders']

# Cell
from fastai2.tabular.all import *

# Cell
class NumpyDataset():
    "A `Numpy` dataset object from `TabularPandas`"
    def __init__(self, to:TabularPandas):
        self.cats = to.cats.to_numpy().astype(np.long)
        self.conts = to.conts.to_numpy().astype(np.float32)
        self.ys = to.ys.to_numpy()

    def __getitem__(self, idx):
        idx = idx[0]
        return self.cats[idx:idx+self.bs], self.conts[idx:idx+self.bs], self.ys[idx:idx+self.bs]

    def __len__(self): return len(self.cats)

# Cell
class NumpyDataLoader(DataLoader):
    def __init__(self, dataset, bs=1, **kwargs):
        "A `DataLoader` for a `NumpyDataset`"
        super().__init__(dataset, bs=bs, **kwargs)
        self.dataset.bs = bs

    def create_item(self, s): return s

    def create_batch(self, b):
        cat, cont, y = self.dataset[b]
        return tensor(cat).to(self.device), tensor(cont).to(self.device), tensor(y).to(self.device)

# Cell
@patch
def shuffle_fn(x:NumpyDataLoader):
    "Shuffle the interior dataset"
    rng = np.random.permutation(len(x.dataset))
    x.dataset.cats = x.dataset.cats[rng]
    x.dataset.conts = x.dataset.conts[rng]
    x.dataset.ys = x.dataset.ys[rng]

# Cell
@patch
def get_idxs(x:NumpyDataLoader):
    "Get index's to select"
    idxs = Inf.count if x.indexed else Inf.nones
    if x.n is not None: idxs = list(range(len(x.dataset)))
    if x.shuffle: x.shuffle_fn()
    return idxs

# Cell
class NumpyDataLoaders(DataLoaders):
    def __init__(self, to, bs=64, val_bs=None, shuffle_train=True, device='cpu', **kwargs):
        train_ds = NumpyDataset(to.train)
        valid_ds = NumpyDataset(to.valid)
        val_bs = bs if val_bs is None else val_bs
        train = NumpyDataLoader(train_ds, bs=bs, shuffle=shuffle_train, device=device, drop_last=True, **kwargs)
        valid = NumpyDataLoader(valid_ds, bs=val_bs, shuffle=False, device=device, **kwargs)
        super().__init__(train, valid, device=device, **kwargs)